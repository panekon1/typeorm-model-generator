
{{! DTO }}
{{#*inline "Import"}}
import {{localImport (toDtoName .) (toDtoWhereName . )}} from '../{{toDtoDirName .}}/{{toDtoFileName .}}'
{{/inline}}

{{#*inline "Field"}}
@Field(() => {{gqlType}}, {{#if options.nullable}}{ nullable: true }{{/if}})
{{printPropertyVisibility}}{{toPropertyName tscName}}{{strictMode}}:{{tscType}}{{#if options.nullable}} | null{{/if}};

{{/inline}}

{{#*inline "Relation"}}
@Field(()=>{{toRelationGqlType relatedTable relationType}}, {{#if relationOptions.nullable}}{ nullable: true }{{/if}})
{{printPropertyVisibility}}{{toPropertyName fieldName}}{{strictMode}}:{{toRelation (toDtoName relatedTable) relationType}}{{#if relationOptions.nullable}}| null{{/if}};

{{/inline}}

{{#*inline "WhereRelation"}}
@Field(()=>{{toDtoWhereName relatedTable relationType}}, { nullable: true })
{{printPropertyVisibility}}{{toPropertyName fieldName}}{{strictMode}}?:{{toRelation (toDtoWhereName relatedTable)}};

{{/inline}}

{{#*inline "Dto"}}
@ObjectType()
export {{defaultExport}} class {{toDtoName tscName}} {

{{#columns}}{{> Field}}{{/columns~}}
{{#relations}}{{> Relation}}{{/relations~}}
}
{{/inline}}

{{! CREATE DTO }}

{{#*inline "CreateField"}}
{{^generated}}
@Field(() => {{gqlType}}{{#if options.nullable}}, { nullable: true }{{/if}})
{{printPropertyVisibility}}{{toPropertyName tscName}}{{#if options.nullable}}?{{/if}}{{strictMode}}:{{tscType}}{{#if options.nullable}} | null{{/if}};
{{/generated}}

{{/inline}}

{{#*inline "CreateRelation"}}
{{^isOneToMany}}
@Field(()=>{{toRelationIdGqlType relationType}}{{#if options.nullable}}, { nullable: true }{{/if}})
{{printPropertyVisibility}}{{toPropertyName fieldName}}{{#if options.nullable}}?{{/if}}{{strictMode}}:{{toRelationId relationType}};
{{/isOneToMany}}

{{/inline}}

{{#*inline "CreateDto"}}
@InputType()
export {{defaultExport}} class {{toDtoCreateName tscName}} {

{{#columns}}{{> CreateField}}{{/columns~}}
{{#relations}}{{> CreateRelation}}{{/relations~}}
}
{{/inline}}

{{! EDIT DTO }}

{{#*inline "EditField"}}
{{^generated}}
@Field(() => {{gqlType}}, { nullable: true })
{{printPropertyVisibility}}{{toPropertyName tscName}}?{{strictMode}}:{{tscType}}{{#if options.nullable}} | null{{/if}};
{{/generated}}

{{/inline}}

{{#*inline "EditRelation"}}
{{^isOneToMany}}
@Field(()=>{{toRelationIdGqlType relationType}}, { nullable: true })
{{printPropertyVisibility}}{{toPropertyName fieldName}}?{{strictMode}}:{{toRelationId relationType}};
{{/isOneToMany}}

{{/inline}}

{{#*inline "EditDto"}}
@InputType()
export {{defaultExport}} class {{toDtoEditName tscName}} {

{{#columns}}{{> EditField}}{{/columns~}}
{{#relations}}{{> EditRelation}}{{/relations~}}
}
{{/inline}}

{{! WHERE DTO }}

{{#*inline "WhereDto"}}
@InputType()
export {{defaultExport}} class {{toDtoWhereName tscName}} {

	{{#relations}}{{> WhereRelation}}{{/relations~}}
	{{toDtoBody columns}}

}
{{/inline}}

import {Field,Float,InputType,Int,ObjectType} from "@nestjs/graphql";
import { {{ toDtoFindWhere columns }} } from 'core/find-where-dto';
{{#fileImports}}{{> Import}}{{/fileImports}}


{{> Dto}}

{{> CreateDto}}

{{> EditDto}}

{{> WhereDto}}
